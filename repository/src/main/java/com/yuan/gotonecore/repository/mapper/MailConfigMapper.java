/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.gotonecore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.gotonecore.repository.entity.MailConfigDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>gtc_mail_config</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/gtc_mail_config.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author nowli
 */
public interface MailConfigMapper  extends BaseMapper<MailConfigDO>{
	/**
	 *  Update DB table <tt>gtc_mail_config</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_mail_config set charset=?, subject=?, from_name=?, gmt_modified=now(), activity_id=?, config_name=?, enabled=?, retry_interval_seconds=? where (id = ?)</tt>
	 *
	 *	@param charset 
	 *	@param subject 
	 *	@param fromName 
	 *	@param activityId 
	 *	@param configName 
	 *	@param enabled 
	 *	@param retryIntervalSeconds 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int modify(@Param("charset")String charset , @Param("subject")String subject , @Param("fromName")String fromName , @Param("activityId")long activityId , @Param("configName")String configName , @Param("enabled")boolean enabled , @Param("retryIntervalSeconds")long retryIntervalSeconds , @Param("id")long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>gtc_mail_config</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from gtc_mail_config where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int delete(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config</tt>
	 *
	 *	@return List<MailConfigDO>
	 *	@throws DataAccessException
	 */	 

		public List<MailConfigDO> selectAll() throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config where (gmt_modified = ?)</tt>
	 *
	 *	@param gmtModified 
	 *	@return List<MailConfigDO>
	 *	@throws DataAccessException
	 */	 

		public List<MailConfigDO> selectGreaterThanModifiedDate(@Param("gmtModified")Date gmtModified) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return MailConfigDO
	 *	@throws DataAccessException
	 */	 

		public MailConfigDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config where (activity_id = ?)</tt>
	 *
	 *	@param activityId 
	 *	@return MailConfigDO
	 *	@throws DataAccessException
	 */	 

		public MailConfigDO selectRandomByActivityId(@Param("activityId")long activityId) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config where (config_name = ?)</tt>
	 *
	 *	@param configName 
	 *	@return MailConfigDO
	 *	@throws DataAccessException
	 */	 

		public MailConfigDO selectByConfigName(@Param("configName")String configName) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select gmt_modified from gtc_mail_config</tt>
	 *
	 *	@return Date
	 *	@throws DataAccessException
	 */	 

		public Date selectMaxGmtModified() throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_config</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, charset, subject, from_name, gmt_modified, gmt_create, activity_id, config_name, enabled, retry_interval_seconds from gtc_mail_config</tt>
	 *
	 *	@param id 
	 *	@param configName 
	 *	@param title 
	 *	@param charset 
	 *	@param fromName 
	 *	@param activityId 
	 *	@param beginModifiedDate 
	 *	@param endModifiedDate 
	 *	@param page 
	 *	@return List<MailConfigDO>
	 *	@throws DataAccessException
	 */	 

		public List<MailConfigDO> search(@Param("id")long id , @Param("configName")String configName , @Param("title")String title , @Param("charset")String charset , @Param("fromName")String fromName , @Param("activityId")long activityId , @Param("beginModifiedDate")String beginModifiedDate , @Param("endModifiedDate")String endModifiedDate , @Param("page")Page<MailConfigDO> page) throws DataAccessException;

}