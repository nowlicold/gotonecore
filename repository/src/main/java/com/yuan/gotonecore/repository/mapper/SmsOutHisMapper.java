/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.gotonecore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.gotonecore.repository.entity.SmsOutHisDO;
import org.springframework.dao.DataAccessException;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports
import java.util.Date;

/**
 * A dao interface provides methods to access database table <tt>gtc_sms_out_his</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/gtc_sms_out_his.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author nowli
 */
public interface SmsOutHisMapper  extends BaseMapper<SmsOutHisDO>{
	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return SmsOutHisDO
	 *	@throws DataAccessException
	 */	 

		public SmsOutHisDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where (sms_id = ?)</tt>
	 *
	 *	@param smsId 
	 *	@return SmsOutHisDO
	 *	@throws DataAccessException
	 */	 

		public SmsOutHisDO selectBySmsId(@Param("smsId")String smsId) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where (1 = 0)</tt>
	 *
	 *	@param ids 
	 *	@return List<SmsOutHisDO>
	 *	@throws DataAccessException
	 */	 

		public List<SmsOutHisDO> selectByIds(@Param("ids")List<?> ids) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where (user_id = ?) order by gmt_send_success DESC</tt>
	 *
	 *	@param userId 
	 *	@return List<SmsOutHisDO>
	 *	@throws DataAccessException
	 */	 

		public List<SmsOutHisDO> selectByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_sms_out_his</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_sms_out_his set gmt_modified=now(), ACK_CODE_VALIDATE_COUNT=(ACK_CODE_VALIDATE_COUNT + 1), ack_code_validate_try_count=(ack_code_validate_try_count + 1) where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAckCodeValidateSuccess(@Param("id")long id) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_sms_out_his</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_sms_out_his set gmt_modified=now(), ack_code_validate_try_count=(ack_code_validate_try_count + 1) where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAckCodeValidateFailed(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his</tt>
	 *
	 *	@param receiver 
	 *	@param userId 
	 *	@param status 
	 *	@param page 
	 *	@return List<SmsOutHisDO>
	 *	@throws DataAccessException
	 */	 

		public List<SmsOutHisDO> search(@Param("receiver")String receiver , @Param("userId")String userId , @Param("status")String status , @Param("page")Page<SmsOutHisDO> page) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where ((1 = 0) AND (biz_id = ?) AND (sms_config_id = ?))</tt>
	 *
	 *	@param bizId 
	 *	@param smsConfigId 
	 *	@return SmsOutHisDO
	 *	@throws DataAccessException
	 */	 

		public SmsOutHisDO selectValidateableByBizIdSmsConfigIdWithIntervalSeconds(@Param("bizId")String bizId , @Param("smsConfigId")long smsConfigId) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_sms_out_his</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, content, status, gmt_resend, send_times, gmt_modified, gmt_create, sms_config_id, properties, biz_id, ack_code, gmt_his_create, gmt_send_success, ack_code_validate_count, send_result, send_channel, send_sub_channel, ack_code_validate_try_count, send_channel_specified, resend_from_id, sms_id, unique_id, template_args, app_code from gtc_sms_out_his where ((1 = 0) AND (biz_id = ?) AND (sms_config_id = ?))</tt>
	 *
	 *	@param bizId 
	 *	@param smsConfigId 
	 *	@return SmsOutHisDO
	 *	@throws DataAccessException
	 */	 

		public SmsOutHisDO selectByBizIdSmsConfigIdWithIntervalSeconds(@Param("bizId")String bizId , @Param("smsConfigId")long smsConfigId) throws DataAccessException;

}