/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.gotonecore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.gotonecore.repository.entity.MailOutDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>gtc_mail_out</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/gtc_mail_out.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author nowli
 */
public interface MailOutMapper  extends BaseMapper<MailOutDO>{
	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id from gtc_mail_out where (1 = 0)</tt>
	 *
	 *	@param channel 
	 *	@param recordCount 
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 

		public List<Integer> selectReadyToSendIds(@Param("channel")String channel , @Param("recordCount")int recordCount) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id from gtc_mail_out where ((channel = ?) AND (gmt_resend <= now()))</tt>
	 *
	 *	@param channel 
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 

		public List<Long> findAssianableMailIdByChannelForUpdate(@Param("channel")String channel) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, mail_config_id, receiver from gtc_mail_out where ((send_client_id = ?) AND (status = 'P'))</tt>
	 *
	 *	@param sendClientId 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> findAssignedMailIdsBySendClientId(@Param("sendClientId")long sendClientId) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_mail_out</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_mail_out set status='status'</tt>
	 *
	 *	@param status 
	 *	@param mailIdList 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateStatusByMailIds(@Param("status")String status , @Param("mailIdList")List<?> mailIdList) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_mail_out</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_mail_out set SEND_CLIENT_ID='sendClientId', gmt_modified=now(), status='status', gmt_resend=now()</tt>
	 *
	 *	@param sendClientId 
	 *	@param status 
	 *	@param mailIdList 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAssignInfoByIds(@Param("sendClientId")long sendClientId , @Param("status")String status , @Param("mailIdList")List<?> mailIdList) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_mail_out</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_mail_out set status='I'</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int unassignMailBySendClientTimeout() throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, status, gmt_schedule, gmt_resend, gmt_modified, gmt_create, send_times, MAIL_CONFIG_ID, template_args, MAIL_CC, MAIL_BCC, MAIL_REPLAY_TO, MAIL_SUBJECT, MAIL_FROM, properties, channel, SEND_CLIENT_ID, activity_id from gtc_mail_out where (id = ?) for update</tt>
	 *
	 *	@param id 
	 *	@return MailOutDO
	 *	@throws DataAccessException
	 */	 

		public MailOutDO findMailMsgByIdForUpdate(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, receiver, user_id, status, gmt_schedule, gmt_resend, gmt_modified, gmt_create, send_times, MAIL_CONFIG_ID, template_args, MAIL_CC, MAIL_BCC, MAIL_REPLAY_TO, MAIL_SUBJECT, MAIL_FROM, properties, channel, SEND_CLIENT_ID, activity_id, MAIL_BODY_PATTERN from gtc_mail_out where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return MailOutDO
	 *	@throws DataAccessException
	 */	 

		public MailOutDO findMailMsgById(@Param("id")Integer id) throws DataAccessException;

	/**
	 *  Update DB table <tt>gtc_mail_out</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update gtc_mail_out set status=?, send_times=?, gmt_modified=now(), gmt_resend=? where (id = ?)</tt>
	 *
	 *	@param status 
	 *	@param sendTimes 
	 *	@param gmtResend 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateSendFailed(@Param("status")String status , @Param("sendTimes")int sendTimes , @Param("gmtResend")Date gmtResend , @Param("id")long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>gtc_mail_out</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from gtc_mail_out where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int deleteMailMsgById(@Param("id")Integer id) throws DataAccessException;

	/**
	 *  Query DB table <tt>gtc_mail_out</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select send_client_id from gtc_mail_out where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectSendClientIdById(@Param("id")long id) throws DataAccessException;

}